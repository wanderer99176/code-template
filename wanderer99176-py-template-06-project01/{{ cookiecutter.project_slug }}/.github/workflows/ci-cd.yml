name: CI/CD Pipeline

# 触发条件
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # 允许手动触发

# 环境变量
env:
  PYTHON_VERSION: "{{ cookiecutter.python_version }}"
  NODE_VERSION: "{{ cookiecutter.node_version }}"
  REGISTRY: {{ cookiecutter.docker_registry }}
  IMAGE_PREFIX: {{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}

# 任务
jobs:
  # ========== 代码检查和测试 ==========
  
  # Python 代码检查
  lint-python:
    name: 🔍 Python Lint
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🐍 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装 uv
        uses: astral-sh/setup-uv@v2

      - name: 🔍 运行 Ruff 检查
        run: |
          uvx ruff check .
          uvx ruff format --check .

  # JavaScript/TypeScript 代码检查
  lint-frontend:
    name: 🔍 Frontend Lint
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 🔍 运行 ESLint
        run: pnpm lint

      - name: 🎨 检查 Prettier 格式
        run: pnpm format:check

      - name: 📝 类型检查
        run: pnpm typecheck

  # 后端测试
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    services:
      # PostgreSQL 服务
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis 服务
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🐍 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装 uv
        uses: astral-sh/setup-uv@v2

      - name: 📦 安装依赖
        run: |
          cd services/backend
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: 🧪 运行测试
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          cd services/backend
          source .venv/bin/activate
          pytest -v --cov --cov-report=xml --cov-report=term

      - name: 📊 上传覆盖率报告
        uses: codecov/codecov-action@v4
        with:
          file: ./services/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # 前端测试
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 🧪 运行单元测试
        run: pnpm test:frontend

      - name: 📊 上传覆盖率报告
        uses: codecov/codecov-action@v4
        with:
          file: ./services/frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # E2E 测试
  test-e2e:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: 🟢 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 🎭 安装 Playwright 浏览器
        run: pnpm exec playwright install --with-deps chromium

      - name: 🚀 启动测试环境
        run: |
          docker-compose -f infra/docker-compose/dev.yml up -d
          # 等待服务就绪
          sleep 10

      - name: 🧪 运行 E2E 测试
        run: pnpm test:e2e

      - name: 📸 上传失败截图
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: services/frontend/test-results/

  # ========== 安全扫描 ==========
  
  # 依赖安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔍 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ========== 构建 Docker 镜像 ==========
  
  # 构建后端镜像
  build-backend:
    name: 🐳 Build Backend Image
    runs-on: ubuntu-latest
    needs: [lint-python, test-backend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 登录容器镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: ./services/backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 扫描 Docker 镜像
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: 📤 上传镜像扫描结果
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  # 构建前端镜像
  build-frontend:
    name: 🐳 Build Frontend Image
    runs-on: ubuntu-latest
    needs: [lint-frontend, test-frontend, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 登录容器镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: ./services/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  {% if cookiecutter.enable_ml_api == 'yes' -%}
  # 构建 ML API 镜像
  build-ml-api:
    name: 🐳 Build ML API Image
    runs-on: ubuntu-latest
    needs: [lint-python, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🔧 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 登录容器镜像仓库
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ml-api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🐳 构建并推送镜像
        uses: docker/build-push-action@v5
        with:
          context: ./services/ml-api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  {% endif -%}

  # ========== 部署 ==========
  
  # 部署到 Kubernetes
  deploy:
    name: 🚀 Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend{% if cookiecutter.enable_ml_api == 'yes' %}, build-ml-api{% endif %}]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://{{ cookiecutter.domain_name }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: ☸️ 设置 kubectl
        uses: azure/setup-kubectl@v3

      - name: 🔑 配置 Kubernetes 凭证
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: 🎯 设置 Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: 🚀 部署后端
        run: |
          helm upgrade --install backend ./infra/kubernetes/helm-charts/backend \
            --namespace {{ cookiecutter.kubernetes_namespace }} \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --wait

      - name: 🚀 部署前端
        run: |
          helm upgrade --install frontend ./infra/kubernetes/helm-charts/frontend \
            --namespace {{ cookiecutter.kubernetes_namespace }} \
            --set image.tag=${{ github.sha }} \
            --wait

      {% if cookiecutter.enable_ml_api == 'yes' -%}
      - name: 🚀 部署 ML API
        run: |
          helm upgrade --install ml-api ./infra/kubernetes/helm-charts/ml-api \
            --namespace {{ cookiecutter.kubernetes_namespace }} \
            --set image.tag=${{ github.sha }} \
            --wait
      {% endif -%}

      - name: ✅ 验证部署
        run: |
          kubectl rollout status deployment/backend -n {{ cookiecutter.kubernetes_namespace }}
          kubectl rollout status deployment/frontend -n {{ cookiecutter.kubernetes_namespace }}

  # ========== 通知 ==========
  
  # 部署成功通知
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 📢 发送通知
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            部署状态: ${{ job.status }}
            提交: ${{ github.sha }}
            作者: ${{ github.actor }}
            分支: ${{ github.ref }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

