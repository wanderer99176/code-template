"""
FastAPI Â∫îÁî®‰∏ªÂÖ•Âè£

ÈÖçÁΩÆÂíåÂàùÂßãÂåñ FastAPI Â∫îÁî®ÔºåÂåÖÊã¨Ôºö
- ‰∏≠Èó¥‰ª∂
- Ë∑ØÁî±
- ‰∫ã‰ª∂Â§ÑÁêÜÂô®
- ÂºÇÂ∏∏Â§ÑÁêÜ
- ÊñáÊ°£ÈÖçÁΩÆ
"""

from contextlib import asynccontextmanager
from typing import Any

from fastapi import FastAPI, Request, status
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException

from {{ cookiecutter.package_name }}.core.config import settings
from {{ cookiecutter.package_name }}.core.logging import setup_logging, logger

# ËÆæÁΩÆÊó•Âøó
setup_logging()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Â∫îÁî®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ
    
    ÂêØÂä®Êó∂ÊâßË°åÂàùÂßãÂåñÔºåÂÖ≥Èó≠Êó∂ÊâßË°åÊ∏ÖÁêÜ
    """
    # ÂêØÂä®Êó∂ÊâßË°å
    logger.info(f"üöÄ ÂêØÂä® {settings.APP_NAME} v{settings.VERSION}")
    logger.info(f"üìù ÁéØÂ¢É: {settings.ENVIRONMENT}")
    logger.info(f"üìä API ÊñáÊ°£: http://{settings.HOST}:{settings.PORT}/docs")
    
    # ÂØºÂÖ•Âπ∂ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ìÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    # from {{ cookiecutter.package_name }}.db.session import init_db
    # await init_db()
    
    yield
    
    # ÂÖ≥Èó≠Êó∂ÊâßË°å
    logger.info(f"üëã ÂÖ≥Èó≠ {settings.APP_NAME}")
    
    # Ê∏ÖÁêÜËµÑÊ∫ê
    # await cleanup()


# ÂàõÂª∫ FastAPI Â∫îÁî®ÂÆû‰æã
app = FastAPI(
    title=settings.APP_NAME,
    description=settings.DESCRIPTION,
    version=settings.VERSION,
    openapi_url=f"{settings.API_V1_PREFIX}/openapi.json",
    docs_url="/docs" if settings.ENVIRONMENT != "production" else None,
    redoc_url="/redoc" if settings.ENVIRONMENT != "production" else None,
    lifespan=lifespan,
)


# ==================== ‰∏≠Èó¥‰ª∂ÈÖçÁΩÆ ====================

# CORS ‰∏≠Èó¥‰ª∂
if settings.BACKEND_CORS_ORIGINS:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# Gzip ÂéãÁº©
app.add_middleware(GZipMiddleware, minimum_size=1000)

# ÂèØ‰ø°‰∏ªÊú∫ÔºàÁîü‰∫ßÁéØÂ¢ÉÔºâ
if settings.ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=settings.ALLOWED_HOSTS or ["*"],
    )


# ==================== ÂºÇÂ∏∏Â§ÑÁêÜ ====================

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException) -> JSONResponse:
    """HTTP ÂºÇÂ∏∏Â§ÑÁêÜÂô®"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": {
                "code": f"HTTP_{exc.status_code}",
                "message": exc.detail,
            },
        },
    )


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(
    request: Request, exc: RequestValidationError
) -> JSONResponse:
    """ËØ∑Ê±ÇÈ™åËØÅÈîôËØØÂ§ÑÁêÜÂô®"""
    errors = []
    for error in exc.errors():
        errors.append({
            "field": ".".join(str(loc) for loc in error["loc"]),
            "message": error["msg"],
            "type": error["type"],
        })
    
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "success": False,
            "error": {
                "code": "VALIDATION_ERROR",
                "message": "ËØ∑Ê±ÇÂèÇÊï∞È™åËØÅÂ§±Ë¥•",
                "details": errors,
            },
        },
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception) -> JSONResponse:
    """ÈÄöÁî®ÂºÇÂ∏∏Â§ÑÁêÜÂô®"""
    logger.exception(f"Êú™Â§ÑÁêÜÁöÑÂºÇÂ∏∏: {exc}")
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "success": False,
            "error": {
                "code": "INTERNAL_SERVER_ERROR",
                "message": "ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ" if settings.ENVIRONMENT == "production" else str(exc),
            },
        },
    )


# ==================== Ë∑ØÁî±ÈÖçÁΩÆ ====================

@app.get("/", tags=["Root"])
async def root() -> dict[str, Any]:
    """Ê†πË∑ØÂæÑ - ÂÅ•Â∫∑Ê£ÄÊü•"""
    return {
        "success": True,
        "message": f"Ê¨¢Ëøé‰ΩøÁî® {settings.APP_NAME} API",
        "version": settings.VERSION,
        "environment": settings.ENVIRONMENT,
        "docs": f"/docs",
    }


@app.get("/health", tags=["Health"])
async def health_check() -> dict[str, Any]:
    """ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ"""
    return {
        "success": True,
        "status": "healthy",
        "version": settings.VERSION,
    }


@app.get("/ping", tags=["Health"])
async def ping() -> dict[str, str]:
    """ÁÆÄÂçïÁöÑ ping Á´ØÁÇπ"""
    return {"ping": "pong"}


# ÂØºÂÖ•Âπ∂Ê≥®ÂÜå API Ë∑ØÁî±
from {{ cookiecutter.package_name }}.api.v1.router import api_router

app.include_router(api_router, prefix=settings.API_V1_PREFIX)


# ==================== ÁõëÊéßÁ´ØÁÇπ ====================

if settings.ENABLE_METRICS:
    from starlette_prometheus import PrometheusMiddleware, metrics
    
    app.add_middleware(PrometheusMiddleware)
    app.add_route("/metrics", metrics)


# ==================== OpenTelemetry ËøΩË∏™ ====================

if settings.ENABLE_TRACING:
    from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
    
    FastAPIInstrumentor.instrument_app(app)


# ==================== ÂºÄÂèëÂ∑•ÂÖ∑ ====================

if settings.ENVIRONMENT == "development":
    @app.get("/info", tags=["Development"])
    async def app_info() -> dict[str, Any]:
        """Â∫îÁî®‰ø°ÊÅØ (‰ªÖÂºÄÂèëÁéØÂ¢É)"""
        return {
            "app_name": settings.APP_NAME,
            "version": settings.VERSION,
            "environment": settings.ENVIRONMENT,
            "database_url": settings.DATABASE_URL.split("@")[-1] if settings.DATABASE_URL else None,
            "redis_url": settings.REDIS_URL.split("@")[-1] if settings.REDIS_URL else None,
            "cors_origins": settings.BACKEND_CORS_ORIGINS,
            "debug": settings.DEBUG,
        }


# ==================== ‰∏ªÁ®ãÂ∫è ====================

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "{{ cookiecutter.package_name }}.main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.ENVIRONMENT == "development",
        log_level=settings.LOG_LEVEL.lower(),
    )

